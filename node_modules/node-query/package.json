{
  "author": {
    "name": "windyrobin"
  },
  "name": "node-query",
  "description": "general sql query interface for hybrid data sources",
  "version": "0.3.3",
  "repository": {
    "url": "git://github.com/alibaba/nquery.git"
  },
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {},
  "devDependencies": {
    "pegjs": ">=0.7.0",
    "mocha": ">=1.0.0",
    "should": ">=1.2.0"
  },
  "readmeFilename": "README.md",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "keywords": [
    "SQL",
    "Engine",
    "Hybird",
    "Data",
    "Source"
  ],
  "license": "GPLv2",
  "readme": "## ![logo](http://nquery.org/images/robin-small.jpg) nQuery  \n\nGeneric SQL engine for Web and Big-data.\n\n## Install\n\nNodeJS Version 0.8.0+\n\n```\nnpm install node-query\n```\n\n## Introduction\n\nit could be used in some typical scenarios: \n  * As a SQL frontend, do syntax checking and formating.\n  * As a SQL engine for your KV databases like HBase or anything like that.\n  * Providing a SQL interface for your HTTP/WEB service.\n  * Do data merging and intergration among many different data sources like Oracle, MySQL, HBase etc. \n\n\n##  Demo & Test\nto run the demo, type the command:\n\n```\nnode demo/demo.js\n```\nfor the test , type the command:\n\n```\nmake\n```\n\nread the demo carefully and then you could write own loader/adapter, \nthere are also many test cases in `test/unit`, they would be great helpful to you.\n\n\n## Usage\n\nplease read the demo files `demo/demo.js`\n\nfor a KV storage engine ,what you need to do is providing the query interfaces like:\n\n  * `singleQuery`, \n  * `rangeQuery`, \n  * `likeQuery`\n\nfor a SQL storage engine, you should realize a function like : \n\n```js\nfunction query(str, function(err, data) {\n  ...  \n})\n```\n\nthen you could execute SQL like that : (code snippet  from `demo.js`)\n\n```js\nvar sqls = [\n  \"SELECT * FROM kv.user WHERE id IN ('01', '03')\",\n  \"SELECT * FROM kv.user WHERE id LIKE '1%'\",\n  \"SELECT type, MAX(age), COUNT(id) FROM kv.user WHERE id BETWEEN '03' AND '10' GROUP BY type ORDER BY MAX(age) DESC\",\n  \"SELECT * from mysql.shop where shop_id > 5\"\n]\n\nvar concurrentJoinSQL = [\n  \"$a := select * from kv.user where id BETWEEN '03' and '10'\",\n  \"$b := select * from mysql.shop where shop_id > 5\",\n  \"$c := select a.type , a.id ,b.name, b.title from $a INNER JOIN $b ON a.type = b.type WHERE a.id > '04'\",\n  \"return $c\"\n]\n\nvar sequentialJoinSQL = [\n  \"$a := select * from kv.user where id BETWEEN '03' and '10'\",\n  //you could also use `unique` do filter firstly\n  //\"$type := UNIQUE($a.type)\",\n  //\"$b := select * from mysql.shop where type = $type\",\n  \"$b := select * from mysql.shop where type in $a.type\",\n  \"$c := select a.type , a.id ,b.name, b.title from $a INNER JOIN $b ON a.type = b.type WHERE a.id > '04'\",\n  \"return [$b, $c]\"\n]\n```\n\nAs you see ,besides as a SQL computation level built on top of KV storage engine, it could do\njoin operation among kv data source, sql sources, HTTP services now\n\n## nSQL Definition\n\nThe 'a little strange' sql as you see above, nSQL realize a subset of SQL92, and it \nalso has some procedure features, it supports variables,  it addes types of `var` \n/ `array` / `table`, and also keyword `return`,  for the details, please see the \nspecification of `peg/nquery.pgejs`.  \n\n\n## Task Scheduling\n\nAs you could see in `concurrentJoinSQL` ,we know that the tasks `$a`, `$b` have no \nrelations, so nQuery would do them concurrently,  but for the procedure of `sequentialJoinSQL`,\n`$b` is depending on `$a`,so task `$b` would be executed after the time `$a` completed \n\n## KeyWord `return` \n\nIn traditional SQL, the query result is a 2-D table , but In nSQL ,we add types of  `array`\n/ `table`,so now you could return complicated results like \n\n```\nreturn [$b, $c, 'hello', [1, 2]]\n```\n\n\n###Just Enjoy It!\n\n\n### Acknowledgements\n\n* PegJS     : http://pegjs.majda.cz/ \n* NodeJS    : http://nodejs.org/ \n* BigQuery  : https://developers.google.com/bigquery/docs/query-reference \n* PL/SQL    : http://docs.oracle.com/cd/B28359_01/appdev.111/b28370/fundamentals.htm#autoId0 \n* MySQL     : http://dev.mysql.com/doc/refman/5.1/en/sql-syntax.html \n* Impala    : https://github.com/cloudera/impala/blob/master/fe/src/main/cup/sql-parser.y \n* PgSQL     : http://www.postgresql.org/docs/9.2/interactive/sql-syntax.html \n* ql.io     : http://ql.io\n\n",
  "bugs": {
    "url": "https://github.com/alibaba/nquery/issues"
  },
  "homepage": "https://github.com/alibaba/nquery",
  "_id": "node-query@0.3.3",
  "dist": {
    "shasum": "5e3a46c102cc6acfd20c21eed6d30dbeac899e34"
  },
  "_from": "node-query@",
  "_resolved": "https://registry.npmjs.org/node-query/-/node-query-0.3.3.tgz"
}
